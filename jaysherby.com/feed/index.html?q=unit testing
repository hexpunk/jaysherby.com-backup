<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://jaysherby.com</id>
  <title>Jay's blog</title>
  <author>
    <name>jaysherby</name>
    <email>hidden</email>
  </author>
  <link href="https://jaysherby.com/" rel="alternate"/>
  <link href="https://jaysherby.com/atom/" rel="self"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>&lt;h1 style="font-weight: normal"&gt;&#13;
  Hi! I'm &lt;strong&gt;Jay Sherby&lt;/strong&gt;!&#13;
&lt;/h1&gt;&#13;
&#13;
I'm an experienced software developer in Chicago.&#13;
&#13;
Hiring? Check  to see...</subtitle>
  <entry>
    <id>https://jaysherby.com/unit-testing-strategies/</id>
    <title>Unit Testing Strategies</title>
    <author>
      <name>jaysherby</name>
      <email>hidden</email>
    </author>
    <content type="html">&lt;p&gt;I might be dating myself, but I've been around since unit testing generally meant using &lt;a href='https://en.wikipedia.org/wiki/XUnit'&gt;&lt;em&gt;x&lt;/em&gt;Unit&lt;/a&gt; or &lt;a href='https://testanything.org/'&gt;Test Anything Protocol&lt;/a&gt;. Unit testing has come a long way, and it's worth the time to keep up with it because new features reduce the pain associated with writing unit tests. In my experience, it's this pain that disincentivizes developers to write good, high-coverage unit tests, even though we know we really should.&lt;/p&gt;
&lt;p&gt;I've been using &lt;a href='https://vitest.dev/'&gt;Vitest&lt;/a&gt; lately for testing my Typescript projects. Vitest is a test runner that piggybacks off of &lt;a href='https://vite.dev/'&gt;Vite&lt;/a&gt; while offering most of the functionality present in &lt;a href='https://jestjs.io/'&gt;Jest&lt;/a&gt;. The examples I share will be based on Vitest's features and API, but most of the techniques are widely available. Check your preferred test runner's documentation to see how it exposes these features.&lt;/p&gt;
&lt;h2 id=table-driven-tests&gt;Table-Driven Tests&lt;/h2&gt;&lt;p&gt;Table-driven tests have a long history, but my first exposure to the concept was via Go's built-in unit test functionality.&lt;/p&gt;
&lt;p&gt;The basic idea is, if you're planning to test a function with a given set of inputs and an expected output, rather than repeat the tedious boilerplate for each test case, create a 2D array of values (the titular table) and iterate over it.&lt;/p&gt;
&lt;p&gt;Here's how it looks in Vitest and Jest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;])(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add(%i, %i) -&amp;gt; %i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the &lt;code&gt;printf&lt;/code&gt;-like syntax allowing you to produce a name for each individual test that incorporates its unique values.&lt;/p&gt;
&lt;p&gt;If your test runner doesn't have such functionality built-in, you can try to recreate it by hand.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;testCases&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;testCases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`add(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;) -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your mileage may vary. I seem to recall the past experience of some test runner choking on runtime-generated tests, but I just tested this approach in Vitest, Jest, and &lt;a href='https://mochajs.org/'&gt;Mocha&lt;/a&gt;, and they all handled it properly.&lt;/p&gt;
&lt;p&gt;If you do happen to find your test runner of choice doesn't handle this properly, you can fall back to a monolithic test case that runs all rows in your table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;testCases&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`add()`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;testCases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The disadvantage to this approach is that a single row will cause the entire test case to fail, and the row at fault may not be readily apparent depending on your reporter configuration.&lt;/p&gt;
&lt;p&gt;In any case, either through ignorance of the approach, or stubborn test runners, I've both seen and written test files with orders of magnitude more lines of code than what they're testing due to hundreds of lines of boilerplate copypasta. Unnecessarily verbose tests are hard to read and maintain. Use table-driven tests to cut the noise.&lt;/p&gt;
&lt;h2 id=snapshots&gt;Snapshots&lt;/h2&gt;&lt;p&gt;My first exposure to snapshot tests was via Jest. The idea was introduced within the framework of testing React-based UI components. At its core, a snapshot is a string containing a serialized representation of data. At test time, the value generated by the function under test is serialized and compared to the previously stored version. In the case of UI components, the snapshot is usually HTML or something very similar.&lt;/p&gt;
&lt;p&gt;The hidden power of snapshots is that they needn't be restricted to UI tests. Jest's and Vitest's snapshot implementations work on practically all values. Try reaching for snapshots whenever you expect a large, deep object or array that's static.&lt;/p&gt;
&lt;p&gt;Snapshots are overkill if you're testing for simpler objects or scalar values. They're inappropriate when the object you're testing against has values that may change per run, like IDs and timestamps.&lt;/p&gt;
&lt;p&gt;Why should you use snapshots for non-UI tests instead of writing out your expected match values by hand? It's all about the tooling!&lt;/p&gt;
&lt;p&gt;Your test runner will do the copypasta for you. But remember to manually review the snapshot to make sure it's correct.&lt;/p&gt;
&lt;p&gt;Snapshots should be checked into your repository and should be code-reviewed just like everything else.&lt;/p&gt;
&lt;p&gt;If the snapshot is small and you don't like having to flip between your test file and the snapshot file, use the in-line equivalent: &lt;code&gt;expect(result).toMatchInlineSnapshot()&lt;/code&gt;. Your test runner will generate a snapshot that lives in the test code instead of a separate file.&lt;/p&gt;
&lt;p&gt;When the day comes that the snapshot test fails not because of a bug but because a change has led to an out-of-date snapshot, updating the snapshot is made easy by your test runner. Making the update usually involves running your test runner with a particular argument. Or your test runner may prompt you if you're running in an interactive mode.&lt;/p&gt;
&lt;h2 id=in-source-testing&gt;In-Source Testing&lt;/h2&gt;&lt;p&gt;In-source testing describes when your unit tests live in the same file as the code they test. Go and Rust users have enjoyed this option since the early days. This seems to be a rarity in the JavaScript world, however. In fact, Vitest is the only test runner I've come across that supports it! Here's why it matters.&lt;/p&gt;
&lt;p&gt;While not a replacement for traditional documentation, types, and code comments, unit tests can serve as a form of supplemental documentation about how a programmer expects code to behave and how they expect it to be used. When the tests live literally right next to the code they test, it makes it easier to see the bigger picture.&lt;/p&gt;
&lt;p&gt;More practically, placing tests within modules allows you to test private functions without having to jump through hoops.&lt;/p&gt;
&lt;p&gt;JavaScript modules are file-based. Anything that is exported from the module can be thought of as that module's public API. Minimizing the breadth of a module's API is important. I've seen modules in the wild that export every function within them. This can lead to difficulties when it comes time to make changes, because if every line of code of a module is public, every behavior, even buggy behaviors, can be depended upon by some other module somewhere.&lt;/p&gt;
&lt;p&gt;JavaScript tests have traditionally lived in separate files from the code they test. This means if you don't export a function, you can't test it directly. You can only test its behavior in the context of the publicly exported functions that call it.&lt;/p&gt;
&lt;p&gt;This issue has caused friction since modules were introduced. I've seen several solutions that usually fall under the category of dependency injection, but I typically find them awkward and brittle.&lt;/p&gt;
&lt;p&gt;That's not to say &lt;a href='https://vitest.dev/guide/in-source.html'&gt;Vitest's solution&lt;/a&gt; is perfect. It does involve depending upon a relatively new feature of the module system. Getting it to work correctly in Typescript involves setting up your &lt;code&gt;tsconfig.json&lt;/code&gt; file &lt;em&gt;just so&lt;/em&gt;. But it's the sanest solution to this problem I've encountered so far.&lt;/p&gt;
&lt;p&gt;Here's the &lt;code&gt;tsconfig.json&lt;/code&gt; settings that got it working seamlessly for me:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;es2022&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;node10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;&amp;quot;types&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vitest/importMeta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When your unit tests live within the module under test, everything in the module's scope is available to your unit tests: classes, functions, constants, imports, everything! Being able to test private functions has been a revelation and a relief. If your test coverage of your private functions is sufficient enough that you trust them, you typically no longer need to test those aspects of the functions that call them.&lt;/p&gt;
&lt;p&gt;I hope you find these unit test features as helpful as I have. They've been invaluable additions to my programming tool belt.&lt;/p&gt;
</content>
    <link href="https://jaysherby.com/unit-testing-strategies/" rel="alternate"/>
    <category term="javascript"/>
    <category term="typescript"/>
    <category term="unit testing"/>
    <published>2025-01-20T23:55:00+00:00</published>
  </entry>
</feed>
